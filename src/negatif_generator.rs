use tch::index::*;
use tch::vision::dataset::Dataset;
use tch::{Kind, Tensor};

const SEED: u64 = 42;

pub fn generate_negatives(t: &Tensor) -> Tensor {
  let device = t.device();
  let kind = t.kind();
  let size = t.size()[0];

  let a = t.view([-1, 1, 28, 28]);

  let s = Tensor::randperm(size, (Kind::Int64, device));
  let b = a.i(&s);

  let masks =
    ((tch_utils::noise::perlin_noise_2d((28, 28), size as usize, (2, 2), SEED, (kind, device))
      + 1.0)
      / 2.0)
      .round();

  (&masks) * a + (1.0 - masks) * b
}

/**
 * Generate a dataset with positive and negative images.
 * Positive images are the original images.
 * Negative images are generated by permuting the pixels of the original images.
 * The labels are Y+1 where is the digit and 0 otherwise.
 */
pub fn forward_forward_mnist() -> Dataset {
  let mnist = tch::vision::mnist::load_dir("data").unwrap();
  let mnist_train_len = mnist.train_images.size()[0];
  let mnist_test_len = mnist.test_images.size()[0];

  let train_images = {
    let train_positive_images = mnist.train_images.view([-1, 784]);
    let train_negative_images = generate_negatives(&mnist.train_images).view([-1, 784]);
    Tensor::cat(&[train_positive_images, train_negative_images], 0)
  };
  let train_labels = {
    let train_positive_labels =
      mnist.train_labels.view([-1]).to_kind(Kind::Float) + 1.0;
    let train_negative_labels =
      Tensor::zeros(&[mnist_train_len], (Kind::Float, mnist.train_images.device()));
    Tensor::cat(&[train_positive_labels, train_negative_labels], 0)
  };

  let s = Tensor::randperm(mnist_train_len * 2, (Kind::Int64, mnist.train_images.device()));
  let train_images = train_images.i(&s);
  let train_labels = train_labels.i(&s);

  let test_images = {
    let test_positive_images = mnist.test_images.view([-1, 784]);
    let test_negative_images = generate_negatives(&mnist.test_images).view([-1, 784]);
    Tensor::cat(&[test_positive_images, test_negative_images], 0)
  };
  let test_labels = {
    let test_positive_labels =
      mnist.test_labels.view([-1]).to_kind(Kind::Float) + 1.0;
    let test_negative_labels =
      Tensor::zeros(&[mnist_test_len], (Kind::Float, mnist.test_images.device()));
    Tensor::cat(&[test_positive_labels, test_negative_labels], 0)
  };
  
  let s = Tensor::randperm(mnist_test_len * 2, (Kind::Int64, mnist.test_images.device()));
  let test_images = test_images.i(&s);
  let test_labels = test_labels.i(&s);

  Dataset {
    train_images,
    train_labels,
    test_images,
    test_labels,
    labels: 1,
  }
}
